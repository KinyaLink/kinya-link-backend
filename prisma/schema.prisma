// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            Int           @id @default(autoincrement())
  email         String?       @unique
  password      String?
  phoneNumber   String?       @map("phone_number")
  firstName     String?       @map("first_name")
  lastName      String?       @map("last_name")
  avatarUrl     String?       @map("avatar_url")
  googleId      String?       @unique @map("google_id")
  facebookId    String?       @unique @map("facebook_id")
  provider      String?  
  stripeCustomerId String?
  subscriptions Subscription[]  

  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  usages        Usage[]        @relation("UserUsages")

  @@map("users")
}

model Subscription {
  id        String           @id @default(uuid())
  userId    Int              // Removed @unique for one-to-many
  planId    String
  status    String           // "active", "inactive", "expired"
  startDate DateTime         @default(now())
  endDate   DateTime?

  user      User             @relation(fields: [userId], references: [id])
  plan      SubscriptionPlan @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}


model SubscriptionPlan {
  id            String           @id @default(uuid())
  name          String           // "Basic", "Standard", "Premium"
  pricePerMonth Float            // Price in USD
  description   String           // Description of the plan
  createdAt     DateTime         @default(now())

  subscriptions Subscription[]   // One plan can have multiple subscriptions

  @@map("subscription_plans")
}
model Usage {
  id        String   @id @default(uuid())
  userId    Int
  callsMade Int      @default(0)  // Tracks number of calls made by the user
  month     String?   // e.g. "2025-02" to track usage for the month
  year      Int?      // Year of the usage record
  date      DateTime @default(now()) // Track usage per day
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation("UserUsages", fields: [userId], references: [id])

  @@map("usages")
}
